= simple_form_for(transaction, remote: true, html: { class: 'transaction' }) do |f|
  = f.error_notification
  .col-sm-12
    .row
      .col-md-6.col-sm-12.col-xs-12
        = f.input :amount, label: false,
          input_html: { value: f.object.amount == 0 ? nil : f.object.amount }
      .col-md-6.col-sm-12.col-xs-12
        - if f.object.category.try(:system?)
          = f.input :category, label: false, disabled: true
        - elsif params[:action] == 'new'
          = f.association :category, as: :select,
            collection: current_organization.categories.where(type: type),
            prompt: 'Category', label: false, value_method: :id,
            selected: @q.nil? ? f.object.category_id \
              : (@q.category_id_eq && !Category.find(@q.category_id_eq).system? \
              ? @q.category_id_eq : nil)
        - else
          = f.association :category, as: :grouped_select,
            collection: current_organization.categories.grouped_by_type,
            group_method: :last, prompt: 'Category', label: false, value_method: :id,
            selected: f.object.category_id

    .row
      .col-md-6.col-sm-12.col-xs-12
        = f.input :customer_name, label: false,
          input_html: { data: { url: autocomplete_customers_path,
            placeholder: 'Customer',
            value: @q.nil? ? transaction.find_customer_name_by_id(f.object.customer_id) \
              : (@q.customer_id_eq ? transaction.find_customer_name_by_id(@q.customer_id_eq) : nil) } }

      .col-md-6.col-sm-12.col-xs-12
        - if f.object.bank_account.nil? || f.object.bank_account.visible?
          = f.association :bank_account, as: :grouped_select, label: false,
            collection: current_organization.bank_accounts.visible.positioned.grouped_by_currency(current_organization.default_currency),
            prompt: 'Bank account', group_method: :last,
            selected: @q.nil? ? f.object.bank_account_id \
              : (@q.bank_account_id_eq && current_organization.bank_accounts.find(@q.bank_account_id_eq).visible? \
              ? @q.bank_account_id_eq : nil)
        - else
          = f.input :bank_account, label: false, disabled: true
    .row
      .col-md-6.col-sm-12.col-xs-12
        = f.input :comment, label: false
      .col-md-6.col-sm-12.col-xs-12
        = f.input :date, as: :string, label: false, placeholder: 'Date',
          input_html: { class: 'datepicker', value: f.object.date.try(:strftime, '%d/%m/%Y') }
  .col-sm-12
    = f.button :submit, class: 'btn-primary'
    - if transaction.persisted?
      = link_to 'Remove', transaction_path(transaction), remote: true, method: :delete,
        data: { confirm: 'Are you sure?', disable_with: 'Removing...' },
        class: 'btn btn-danger'
