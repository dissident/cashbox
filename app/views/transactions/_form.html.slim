= simple_form_for(transaction, remote: true, html: { class: 'form-horizontal transaction' },
    wrapper: :horizontal_form) do |f|
  = f.error_notification

  = f.input :amount, input_html: { value: f.object.amount == 0 ? nil : f.object.amount, maxlength: 25 }

  - if f.object.category.try(:system?)
    = f.input :category, disabled: true
  - elsif params[:action] == 'new' || params[:action] == 'create'
    = f.association :category, as: :select,
      collection: current_organization.categories.where(type: type),
      prompt: 'Category', value_method: :id,
      selected: @q.nil? ? f.object.category_id \
        : (@q.category_id_in ? @q.category_id_in : nil)
  - else
    = f.association :category, as: :grouped_select,
      collection: current_organization.categories.grouped_by_type,
      group_method: :last, prompt: 'Category', value_method: :id,
      selected: f.object.category_id

  - if transaction.transfer? && (params[:action] == 'edit' || params[:action] == 'update')
    = f.simple_fields_for :transfer_out, transaction.transfer_out do |t|
      = t.input :amount, input_html: { id: 'transfer-out-amount', maxlength: 25 }, label: 'From amount'
      = t.input :category_id, as: :hidden
      = t.input :customer_id, as: :hidden
      = t.input :comment, as: :hidden
      = t.input :date, as: :hidden
      = t.association :bank_account, as: :grouped_select,
        collection: current_organization.bank_accounts.visible.positioned.grouped_by_currency(current_organization.default_currency),
        prompt: 'Bank account', group_method: :last, label: 'From',
        selected: t.object.bank_account_id
  - elsif params[:invoice_id] && params[:customer_id] || f.object.invoice_id
    = f.input :customer_name, as: :hidden
  - else
    = f.input :customer_name, input_html: { class: 'customer-select2', data: { url: autocomplete_customers_path,
      placeholder: 'Customer',
      value: @q.nil? ? current_organization.find_customer_name_by_id(f.object.customer_id) \
        : (@q.customer_id_eq ? current_organization.find_customer_name_by_id(@q.customer_id_eq) : nil) } }

  - if params[:invoice_id] && params[:currency] || f.object.invoice_id
    = f.association :bank_account, as: :grouped_select,
      collection: current_organization.bank_accounts.where(currency: params[:currency] || \
      current_organization.invoices.find(f.object.invoice_id).currency).visible.positioned.grouped_by_currency(current_organization.default_currency),
      prompt: 'Bank account', group_method: :last, label: transaction.transfer? ? 'To' : 'Bank account',
      selected: f.object.bank_account_id
  - elsif f.object.bank_account.nil? || f.object.bank_account.visible?
    = f.association :bank_account, as: :grouped_select,
      collection: current_organization.bank_accounts.visible.positioned.grouped_by_currency(current_organization.default_currency),
      prompt: 'Bank account', group_method: :last, label: transaction.transfer? ? 'To' : 'Bank account',
      selected: @q.nil? ? f.object.bank_account_id \
        : (@q.bank_account_id_eq && current_organization.bank_accounts.find(@q.bank_account_id_eq).visible? \
        ? @q.bank_account_id_eq : nil)
  - else
    = f.input :bank_account, disabled: true

  - if params[:invoice_id] || f.object.invoice_id
    = f.input :comission, input_html: { class: 'comission' }

  - if params[:invoice_id] || f.object.invoice_id
    = f.input :comment, as: :hidden
  - else
    = f.input :comment

  = f.input :date, as: :string, placeholder: 'Date',
    input_html: { class: 'datepicker', value: f.object.date.present? ? l(f.object.date) : nil }

  - if params[:invoice_id] || f.object.invoice_id
    = f.input :invoice_id, as: :hidden
